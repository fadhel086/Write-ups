
= Handling Interrupts

One of the complexities handled by the kernel is managing the devices connected to the system. Most of the devices(keyboard, mouse, serial devices etc) connected to the system have much slower clock speed than the processor and the data to be provided by the device are asynchronous. As a result, it is a wastage of processor time to poll for signals from external devices. Devices provide interrupt signals to processor, when it needs to be processed.

In general, interrupt lines from hardware devices are connected to input pins of an Interrupt controller, which multiplexes these into a single line of the processor. Once interrupt is received, interrupt controller signals the processor. The current thread of execution is interrupted and interrupt service routine (ISR) is executed.

== Criteria to be met by ISR:

1. Ordinary kernel threads executes in process context and could be preempted or could call function that could sleep. An ISR is executing in interrupt context and has no backing process, thus it cannot be preempted nor call any function that could sleep. 

2. ISR’s are being executed by preempting a running kernel, as such ISR’s have to run as quickly as possible, so that interrupted process can resume execution.

In practical programming, meeting above conditions are stringent. Consider a situation where a 4-way keypad is connected to the processor using i2c lines. The key pressed data is read using i2c protocol and processor is notified that a key has been pressed using interrupt line. Thus when keypad has been pressed, it generates an interrupt and respective ISR has to fetch data using i2c protocol.

[code snippet]
———
The i2c read/write functions, i.e.

i2c_master_read/write(arg1, arg2, arg3) are blocking I/O calls and sleeps.
—--

== Programming ISRs

To deal with above competing situation, kernel developers recommend to split interrupt processing into two halves, known as top and bottom halves. Top half, does time critical work such as acknowledging the interrupt or resetting the hardware. The rest lengthy procedures are done by bottom half. Top half executes in ISR’s , while bottom half executes at a later convenient time, literally known as deferring work in kernel terminology.

== Deferring work and work queues

Kernel provides a number of mechanisms to implement bottom halves, namely Softirqs, Tasklets and Work queues. Work queues defer work into a kernel thread(worker threads) and as such it runs in process context. Thus it could be preempted or could call functions that sleep.

Implementing the bottom half using work queues, is illustrated below;

1. Initially, the driver will have to initialise a work(bottom half code) and add it to a workqueue.
2.In the interrupt handler, do the immediate processing(Top half) and schedule the work(bottom half).
3. Return from the interrupt handler.

Below code snippet shows the skeleton implementation

[c, code-snippet]
 
/* create work to be deferred,
 work_name is the name of the work,
 work_handler (Bottom half code) is the handler to be executed  */

DECLARE_WORK(work_name, void *work_handler(void *), void *data);

struct workqueue_struct *my_queue;

static int init()
{
	/* Initialise hardware device */
	/* Initialize interrupts from hardware */
	
	queue_work(my_queue, my_work);
}

irqreturn_t Interrupt_handler(int, void *)
{	
	/* test if the handler was called for it’s own device */
	if(condition) 
	{
		/* Do the top half of interrupt handler */
		…
		..
		/* call the bottom half */
		schedule_work(my_work);
		return IRQ_HANDLED
	}
	else
		return IRQ_NONE
}

void work_handler(void)
{
	/* 
	   Implement the bottom half of the code
	   Read from i2c, spi or uart device
   	*/

}

static void exit(void)
{
	/*
	   De-initialize, the module
	*/
}

== returning from Interrupt handler

Above code snippet shows two MACROS are returned (IRQ_HANDLED/ IRQ_NONE) from interrupt handler. IRQ_HANDLED indicates that the interrupt handler was called by the correct device and handled appropriately.
IRQ_NONE, indicates that the handler was called by wrong device and needs to handled appropriately. Kernel then tries to call the appropriate handler.










